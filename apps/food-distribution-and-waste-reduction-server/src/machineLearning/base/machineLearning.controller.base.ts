/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MachineLearningService } from "../machineLearning.service";
import { MachineLearningCreateInput } from "./MachineLearningCreateInput";
import { MachineLearning } from "./MachineLearning";
import { Request } from "../../request/base/Request";
import { MachineLearningFindManyArgs } from "./MachineLearningFindManyArgs";
import { MachineLearningWhereUniqueInput } from "./MachineLearningWhereUniqueInput";
import { MachineLearningUpdateInput } from "./MachineLearningUpdateInput";
import { DemandPrediction } from "../DemandPrediction";

export class MachineLearningControllerBase {
  constructor(protected readonly service: MachineLearningService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MachineLearning })
  async createMachineLearning(
    @common.Body() data: MachineLearningCreateInput
  ): Promise<MachineLearning> {
    return await this.service.createMachineLearning({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        area: true,
        predictedDemand: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MachineLearning] })
  @ApiNestedQuery(MachineLearningFindManyArgs)
  async machineLearnings(
    @common.Req() request: Request
  ): Promise<MachineLearning[]> {
    const args = plainToClass(MachineLearningFindManyArgs, request.query);
    return this.service.machineLearnings({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        area: true,
        predictedDemand: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MachineLearning })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async machineLearning(
    @common.Param() params: MachineLearningWhereUniqueInput
  ): Promise<MachineLearning | null> {
    const result = await this.service.machineLearning({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        area: true,
        predictedDemand: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MachineLearning })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMachineLearning(
    @common.Param() params: MachineLearningWhereUniqueInput,
    @common.Body() data: MachineLearningUpdateInput
  ): Promise<MachineLearning | null> {
    try {
      return await this.service.updateMachineLearning({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          area: true,
          predictedDemand: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MachineLearning })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMachineLearning(
    @common.Param() params: MachineLearningWhereUniqueInput
  ): Promise<MachineLearning | null> {
    try {
      return await this.service.deleteMachineLearning({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          area: true,
          predictedDemand: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/predictions")
  @swagger.ApiOkResponse({
    type: DemandPrediction,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetDemandPredictions(
    @common.Body()
    body: string
  ): Promise<DemandPrediction[]> {
    return this.service.GetDemandPredictions(body);
  }
}
