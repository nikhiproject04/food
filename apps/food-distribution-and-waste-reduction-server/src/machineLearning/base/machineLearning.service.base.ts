/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MachineLearning as PrismaMachineLearning,
} from "@prisma/client";
import { DemandPrediction } from "../DemandPrediction";

export class MachineLearningServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MachineLearningCountArgs, "select">
  ): Promise<number> {
    return this.prisma.machineLearning.count(args);
  }

  async machineLearnings(
    args: Prisma.MachineLearningFindManyArgs
  ): Promise<PrismaMachineLearning[]> {
    return this.prisma.machineLearning.findMany(args);
  }
  async machineLearning(
    args: Prisma.MachineLearningFindUniqueArgs
  ): Promise<PrismaMachineLearning | null> {
    return this.prisma.machineLearning.findUnique(args);
  }
  async createMachineLearning(
    args: Prisma.MachineLearningCreateArgs
  ): Promise<PrismaMachineLearning> {
    return this.prisma.machineLearning.create(args);
  }
  async updateMachineLearning(
    args: Prisma.MachineLearningUpdateArgs
  ): Promise<PrismaMachineLearning> {
    return this.prisma.machineLearning.update(args);
  }
  async deleteMachineLearning(
    args: Prisma.MachineLearningDeleteArgs
  ): Promise<PrismaMachineLearning> {
    return this.prisma.machineLearning.delete(args);
  }
  async GetDemandPredictions(args: string): Promise<DemandPrediction[]> {
    throw new Error("Not implemented");
  }
}
