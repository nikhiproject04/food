/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MachineLearning } from "./MachineLearning";
import { MachineLearningCountArgs } from "./MachineLearningCountArgs";
import { MachineLearningFindManyArgs } from "./MachineLearningFindManyArgs";
import { MachineLearningFindUniqueArgs } from "./MachineLearningFindUniqueArgs";
import { CreateMachineLearningArgs } from "./CreateMachineLearningArgs";
import { UpdateMachineLearningArgs } from "./UpdateMachineLearningArgs";
import { DeleteMachineLearningArgs } from "./DeleteMachineLearningArgs";
import { DemandPrediction } from "../DemandPrediction";
import { MachineLearningService } from "../machineLearning.service";
@graphql.Resolver(() => MachineLearning)
export class MachineLearningResolverBase {
  constructor(protected readonly service: MachineLearningService) {}

  async _machineLearningsMeta(
    @graphql.Args() args: MachineLearningCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MachineLearning])
  async machineLearnings(
    @graphql.Args() args: MachineLearningFindManyArgs
  ): Promise<MachineLearning[]> {
    return this.service.machineLearnings(args);
  }

  @graphql.Query(() => MachineLearning, { nullable: true })
  async machineLearning(
    @graphql.Args() args: MachineLearningFindUniqueArgs
  ): Promise<MachineLearning | null> {
    const result = await this.service.machineLearning(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MachineLearning)
  async createMachineLearning(
    @graphql.Args() args: CreateMachineLearningArgs
  ): Promise<MachineLearning> {
    return await this.service.createMachineLearning({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MachineLearning)
  async updateMachineLearning(
    @graphql.Args() args: UpdateMachineLearningArgs
  ): Promise<MachineLearning | null> {
    try {
      return await this.service.updateMachineLearning({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MachineLearning)
  async deleteMachineLearning(
    @graphql.Args() args: DeleteMachineLearningArgs
  ): Promise<MachineLearning | null> {
    try {
      return await this.service.deleteMachineLearning(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => [DemandPrediction])
  async GetDemandPredictions(
    @graphql.Args()
    args: string
  ): Promise<DemandPrediction[]> {
    return this.service.GetDemandPredictions(args);
  }
}
