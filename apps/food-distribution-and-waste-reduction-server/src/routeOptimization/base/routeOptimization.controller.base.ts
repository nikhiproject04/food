/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RouteOptimizationService } from "../routeOptimization.service";
import { RouteOptimizationCreateInput } from "./RouteOptimizationCreateInput";
import { RouteOptimization } from "./RouteOptimization";
import { Request } from "../../request/base/Request";
import { RouteOptimizationFindManyArgs } from "./RouteOptimizationFindManyArgs";
import { RouteOptimizationWhereUniqueInput } from "./RouteOptimizationWhereUniqueInput";
import { RouteOptimizationUpdateInput } from "./RouteOptimizationUpdateInput";
import { OptimizeRouteDto } from "../OptimizeRouteDto";

export class RouteOptimizationControllerBase {
  constructor(protected readonly service: RouteOptimizationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RouteOptimization })
  async createRouteOptimization(
    @common.Body() data: RouteOptimizationCreateInput
  ): Promise<RouteOptimization> {
    return await this.service.createRouteOptimization({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        routeId: true,
        startPoint: true,
        endPoint: true,
        optimizedRoute: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RouteOptimization] })
  @ApiNestedQuery(RouteOptimizationFindManyArgs)
  async routeOptimizations(
    @common.Req() request: Request
  ): Promise<RouteOptimization[]> {
    const args = plainToClass(RouteOptimizationFindManyArgs, request.query);
    return this.service.routeOptimizations({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        routeId: true,
        startPoint: true,
        endPoint: true,
        optimizedRoute: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RouteOptimization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async routeOptimization(
    @common.Param() params: RouteOptimizationWhereUniqueInput
  ): Promise<RouteOptimization | null> {
    const result = await this.service.routeOptimization({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        routeId: true,
        startPoint: true,
        endPoint: true,
        optimizedRoute: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RouteOptimization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRouteOptimization(
    @common.Param() params: RouteOptimizationWhereUniqueInput,
    @common.Body() data: RouteOptimizationUpdateInput
  ): Promise<RouteOptimization | null> {
    try {
      return await this.service.updateRouteOptimization({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          routeId: true,
          startPoint: true,
          endPoint: true,
          optimizedRoute: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RouteOptimization })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRouteOptimization(
    @common.Param() params: RouteOptimizationWhereUniqueInput
  ): Promise<RouteOptimization | null> {
    try {
      return await this.service.deleteRouteOptimization({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          routeId: true,
          startPoint: true,
          endPoint: true,
          optimizedRoute: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/routes/optimize")
  @swagger.ApiOkResponse({
    type: OptimizeRouteDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async OptimizeRoute(
    @common.Body()
    body: OptimizeRouteDto
  ): Promise<OptimizeRouteDto> {
    return this.service.OptimizeRoute(body);
  }
}
