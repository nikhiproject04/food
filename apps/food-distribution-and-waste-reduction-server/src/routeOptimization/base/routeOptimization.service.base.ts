/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RouteOptimization as PrismaRouteOptimization,
} from "@prisma/client";
import { OptimizeRouteDto } from "../OptimizeRouteDto";

export class RouteOptimizationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RouteOptimizationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.routeOptimization.count(args);
  }

  async routeOptimizations(
    args: Prisma.RouteOptimizationFindManyArgs
  ): Promise<PrismaRouteOptimization[]> {
    return this.prisma.routeOptimization.findMany(args);
  }
  async routeOptimization(
    args: Prisma.RouteOptimizationFindUniqueArgs
  ): Promise<PrismaRouteOptimization | null> {
    return this.prisma.routeOptimization.findUnique(args);
  }
  async createRouteOptimization(
    args: Prisma.RouteOptimizationCreateArgs
  ): Promise<PrismaRouteOptimization> {
    return this.prisma.routeOptimization.create(args);
  }
  async updateRouteOptimization(
    args: Prisma.RouteOptimizationUpdateArgs
  ): Promise<PrismaRouteOptimization> {
    return this.prisma.routeOptimization.update(args);
  }
  async deleteRouteOptimization(
    args: Prisma.RouteOptimizationDeleteArgs
  ): Promise<PrismaRouteOptimization> {
    return this.prisma.routeOptimization.delete(args);
  }
  async OptimizeRoute(args: OptimizeRouteDto): Promise<OptimizeRouteDto> {
    throw new Error("Not implemented");
  }
}
