/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RouteOptimization } from "./RouteOptimization";
import { RouteOptimizationCountArgs } from "./RouteOptimizationCountArgs";
import { RouteOptimizationFindManyArgs } from "./RouteOptimizationFindManyArgs";
import { RouteOptimizationFindUniqueArgs } from "./RouteOptimizationFindUniqueArgs";
import { CreateRouteOptimizationArgs } from "./CreateRouteOptimizationArgs";
import { UpdateRouteOptimizationArgs } from "./UpdateRouteOptimizationArgs";
import { DeleteRouteOptimizationArgs } from "./DeleteRouteOptimizationArgs";
import { OptimizeRouteDto } from "../OptimizeRouteDto";
import { RouteOptimizationService } from "../routeOptimization.service";
@graphql.Resolver(() => RouteOptimization)
export class RouteOptimizationResolverBase {
  constructor(protected readonly service: RouteOptimizationService) {}

  async _routeOptimizationsMeta(
    @graphql.Args() args: RouteOptimizationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RouteOptimization])
  async routeOptimizations(
    @graphql.Args() args: RouteOptimizationFindManyArgs
  ): Promise<RouteOptimization[]> {
    return this.service.routeOptimizations(args);
  }

  @graphql.Query(() => RouteOptimization, { nullable: true })
  async routeOptimization(
    @graphql.Args() args: RouteOptimizationFindUniqueArgs
  ): Promise<RouteOptimization | null> {
    const result = await this.service.routeOptimization(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RouteOptimization)
  async createRouteOptimization(
    @graphql.Args() args: CreateRouteOptimizationArgs
  ): Promise<RouteOptimization> {
    return await this.service.createRouteOptimization({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RouteOptimization)
  async updateRouteOptimization(
    @graphql.Args() args: UpdateRouteOptimizationArgs
  ): Promise<RouteOptimization | null> {
    try {
      return await this.service.updateRouteOptimization({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RouteOptimization)
  async deleteRouteOptimization(
    @graphql.Args() args: DeleteRouteOptimizationArgs
  ): Promise<RouteOptimization | null> {
    try {
      return await this.service.deleteRouteOptimization(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OptimizeRouteDto)
  async OptimizeRoute(
    @graphql.Args()
    args: OptimizeRouteDto
  ): Promise<OptimizeRouteDto> {
    return this.service.OptimizeRoute(args);
  }
}
