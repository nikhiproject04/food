/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FoodDonation } from "./FoodDonation";
import { FoodDonationCountArgs } from "./FoodDonationCountArgs";
import { FoodDonationFindManyArgs } from "./FoodDonationFindManyArgs";
import { FoodDonationFindUniqueArgs } from "./FoodDonationFindUniqueArgs";
import { CreateFoodDonationArgs } from "./CreateFoodDonationArgs";
import { UpdateFoodDonationArgs } from "./UpdateFoodDonationArgs";
import { DeleteFoodDonationArgs } from "./DeleteFoodDonationArgs";
import { CreateFoodDonationDto } from "../CreateFoodDonationDto";
import { FoodDonationService } from "../foodDonation.service";
@graphql.Resolver(() => FoodDonation)
export class FoodDonationResolverBase {
  constructor(protected readonly service: FoodDonationService) {}

  async _foodDonationsMeta(
    @graphql.Args() args: FoodDonationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FoodDonation])
  async foodDonations(
    @graphql.Args() args: FoodDonationFindManyArgs
  ): Promise<FoodDonation[]> {
    return this.service.foodDonations(args);
  }

  @graphql.Query(() => FoodDonation, { nullable: true })
  async foodDonation(
    @graphql.Args() args: FoodDonationFindUniqueArgs
  ): Promise<FoodDonation | null> {
    const result = await this.service.foodDonation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FoodDonation)
  async createFoodDonation(
    @graphql.Args() args: CreateFoodDonationArgs
  ): Promise<FoodDonation> {
    return await this.service.createFoodDonation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FoodDonation)
  async updateFoodDonation(
    @graphql.Args() args: UpdateFoodDonationArgs
  ): Promise<FoodDonation | null> {
    try {
      return await this.service.updateFoodDonation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FoodDonation)
  async deleteFoodDonation(
    @graphql.Args() args: DeleteFoodDonationArgs
  ): Promise<FoodDonation | null> {
    try {
      return await this.service.deleteFoodDonation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreateFoodDonationDto)
  async CreateFoodDonation(
    @graphql.Args()
    args: CreateFoodDonationDto
  ): Promise<CreateFoodDonationDto> {
    return this.service.CreateFoodDonation(args);
  }
}
